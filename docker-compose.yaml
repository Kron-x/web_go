services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT_METRICS:-8080}:8080"
      - "${PORT_WEB:-5000}:5000"
    depends_on:
      postgres: 
        condition: service_healthy # Ждём запуска Postgres
    env_file:
      - .env
    networks:
      - app-network  # Общая сеть
      

  # Контейнер с PostgreSQL
  postgres:
    image: postgres:15-alpine  # Лёгкий Alpine-образ
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Сохраняем данные
    ports:
      - "${POSTGRES_HOST_PORT:-5432}:5432"  # Проброс порта (для подключения с хоста)
    networks:
      - app-network
    healthcheck:  # Опционально: проверка готовности БД
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  # Контейнер с прометеусом
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"  # Веб-интерфейс Prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/  # Конфиr|Алерты
    networks:
      - app-network
    depends_on:
      - app

  # Grafana для визуализации
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"  # Веб-интерфейс Grafana
    volumes:
      - grafana-storage:/var/lib/grafana  # Сохраняем дашборды
    networks:
      - app-network
    depends_on:
      - prometheus  # Grafana зависит от Prometheus

  # Добавляем node_exporter
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - app-network
    pid: "host"  # Важно для доступа к системным метрикам

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - app-network
    depends_on:
      - prometheus 
    
# Объявляем сети и тома
volumes:
  postgres_data:  # Том для данных Postgres (не удаляется при перезапуске)
  grafana-storage:
  
# Локальная сеть???
networks:
  app-network:
    driver: bridge